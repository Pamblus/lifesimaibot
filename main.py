import asyncio
import threading
from collections import deque
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

from config import TELEGRAM_TOKEN
from prompt import load_user_data, process_user_action, get_inventory_count
from transfer import parse_transfer_command, create_transfer, execute_transfer, pending_transfers
from datetime import datetime
import os
import json
# –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
request_queue = deque()
processing_lock = threading.Lock()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É users
os.makedirs("users", exist_ok=True)

async def process_queue():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤"""
    while True:
        if request_queue:
            with processing_lock:
                if request_queue:
                    update, context, user_input, user_data = request_queue.popleft()
                    
                    processing_msg = await update.message.reply_text("ü§î –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º...")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –ò–ò
                    response_text = process_user_action(user_input, user_data)
                    
                    await processing_msg.delete()
                    await update.message.reply_text(response_text)
        
        await asyncio.sleep(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_data = load_user_data(user.id, user.username, user.first_name)
    
    welcome_text = f"""
üéÆ –ò–ì–†–ê –û –ñ–ò–ó–ù–ò

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 
üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}$ 

üìä –ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å
/profile - –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/profile ID - –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞
/balance - –±–∞–ª–∞–Ω—Å  
/inventory - –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
/top - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤

üí¨ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –¥–µ–Ω—å–≥–∏ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º!
–ü—Ä–∏–º–µ—Ä: "–ø–µ—Ä–µ–¥–∞—Ç—å 100$ –∏ —è–±–ª–æ–∫–æ –∏–≥—Ä–æ–∫—É 123456 —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–∏–≤–µ—Ç"
    """
    
    await update.message.reply_text(welcome_text)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user = update.effective_user
    
    if context.args:
        try:
            target_id = int(context.args[0])
            user_data = load_user_data(target_id)
            if "user_id" not in user_data:
                await update.message.reply_text("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞")
            return
    else:
        user_data = load_user_data(user.id)
    
    profile_text = f"""
üë§ –ü–†–û–§–ò–õ–¨ –ò–ì–†–û–ö–ê

ID: {user_data['user_id']}
–ò–º—è: {user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–Æ–∑–µ—Ä–Ω–µ–π–º: @{user_data.get('username', '–Ω–µ—Ç')}
üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}$
üéí –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {get_inventory_count(user_data['inventory'])}/20

üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.fromisoformat(user_data['registered_date']).strftime('%d.%m.%Y')}
    """
    
    if user_data["inventory"]:
        profile_text += "\nüéí –ò–ù–í–ï–ù–¢–ê–†–¨:\n"
        for item, quantity in user_data["inventory"].items():
            profile_text += f"‚Ä¢ {item}: {quantity} —à—Ç.\n"
    
    await update.message.reply_text(profile_text)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
    user = update.effective_user
    user_data = load_user_data(user.id)
    
    await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']}$")

async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /inventory"""
    user = update.effective_user
    user_data = load_user_data(user.id)
    
    if user_data["inventory"]:
        inventory_text = f"üéí –í–ê–® –ò–ù–í–ï–ù–¢–ê–†–¨ ({get_inventory_count(user_data['inventory'])}/20):\n"
        for item, quantity in user_data["inventory"].items():
            inventory_text += f"‚Ä¢ {item}: {quantity} —à—Ç.\n"
    else:
        inventory_text = "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç"
    
    await update.message.reply_text(inventory_text)

async def top_players(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top"""
    all_users = []
    for filename in os.listdir("users"):
        if filename.endswith('.json'):
            user_file = os.path.join("users", filename)
            with open(user_file, 'r', encoding='utf-8') as f:
                user_data = json.load(f)
                all_users.append(user_data)
    
    all_users.sort(key=lambda x: x['balance'], reverse=True)
    
    top_text = "üèÜ –¢–û–ü-15 –ò–ì–†–û–ö–û–í üèÜ\n\n"
    
    for i, user in enumerate(all_users[:15], 1):
        username = user.get('username', '')
        first_name = user.get('first_name', '')
        display_name = f"@{username}" if username else first_name
        
        medal = ""
        if i == 1: medal = "ü•á"
        elif i == 2: medal = "ü•à" 
        elif i == 3: medal = "ü•â"
        
        top_text += f"{medal}{i}. {display_name}: {user['balance']}$ (ID: {user['user_id']})\n"
    
    if not all_users:
        top_text = "üìä –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!"
    
    await update.message.reply_text(top_text)

async def handle_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–∞—á–∏"""
    user = update.effective_user
    text = update.message.text
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –ò–ò
    money, items, receiver_id, message = parse_transfer_command(text)
    
    if not receiver_id:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: '–ø–µ—Ä–µ–¥–∞—Ç—å 100$ –∏ —è–±–ª–æ–∫–æ –∏–≥—Ä–æ–∫—É 123456 —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–∏–≤–µ—Ç'")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É
    success, result = create_transfer(user.id, receiver_id, money, items, message)
    
    if success:
        transfer_id = result
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{transfer_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{transfer_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        transfer_info = f"üí∏ –ù–û–í–ê–Ø –ü–ï–†–ï–î–ê–ß–ê\n\n"
        transfer_info += f"–û—Ç: {user.first_name} (ID: {user.id})\n"
        if money > 0:
            transfer_info += f"üí∞ –î–µ–Ω—å–≥–∏: {money}$\n"
        if items:
            transfer_info += f"üéí –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join([f'{k} ({v} —à—Ç.)' for k, v in items.items()])}\n"
        if message:
            transfer_info += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
        
        try:
            await context.bot.send_message(
                chat_id=receiver_id,
                text=transfer_info,
                reply_markup=reply_markup
            )
            await update.message.reply_text("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.")
    else:
        await update.message.reply_text(result)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data.startswith('accept_'):
        transfer_id = data.replace('accept_', '')
        transfer = pending_transfers.get(transfer_id)
        
        if transfer and transfer["receiver_id"] == user_id:
            success = execute_transfer(transfer_id)
            if success:
                await query.edit_message_text("‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                try:
                    sender_msg = f"‚úÖ –ò–≥—Ä–æ–∫ (ID: {user_id}) –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –ø–µ—Ä–µ–¥–∞—á—É!"
                    if transfer.get("money", 0) > 0:
                        sender_msg += f"\nüí∞ –ü–µ—Ä–µ–¥–∞–Ω–æ: {transfer['money']}$"
                    if transfer.get("items"):
                        sender_msg += f"\nüéí –ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(transfer['items'].keys())}"
                    await context.bot.send_message(chat_id=transfer["sender_id"], text=sender_msg)
                except:
                    pass
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏")
        else:
            await query.edit_message_text("‚ùå –ü–µ—Ä–µ–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    elif data.startswith('reject_'):
        transfer_id = data.replace('reject_', '')
        transfer = pending_transfers.get(transfer_id)
        
        if transfer and transfer["receiver_id"] == user_id:
            del pending_transfers[transfer_id]
            await query.edit_message_text("‚ùå –ü–µ—Ä–µ–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    chat_id=transfer["sender_id"], 
                    text=f"‚ùå –ò–≥—Ä–æ–∫ (ID: {user_id}) –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –ø–µ—Ä–µ–¥–∞—á—É"
                )
            except:
                pass

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    user_input = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–ºÊòØÂê¶ÊòØ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥–∞—á–∏
    if any(word in user_input.lower() for word in ['–ø–µ—Ä–µ–¥–∞—Ç—å', '–∫–∏–Ω—É—Ç—å', '–æ—Ç–¥–∞—Ç—å', '–¥–∞—Ç—å']):
        await handle_transfer(update, context)
        return
    
    user_data = load_user_data(user.id, user.username, user.first_name)
    
    request_queue.append((update, context, user_input, user_data))
    await update.message.reply_text("‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å...")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("inventory", inventory))
    application.add_handler(CommandHandler("top", top_players))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏
    loop = asyncio.get_event_loop()
    loop.create_task(process_queue())
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
